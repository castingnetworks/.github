# This workflow is 1 of 4 workflows that should be added as a package when used in a repository.
# The 4 workflows and the order they should be applied in are:
# 
# * = You are here
# 
# 1. castingnetworks-build.yml
# 2. castingnetworks-force-prerelease.yml
# 3. castingnetworks-delete-release.yml
# 4. *castingnetworks-release.yml
# 
# Before adding these workflows please configure the calling repository with the following variables in the repository settings:
# - NODE_VERSION: The version of node to use for the build (e.g. 18)
# - SERVICE_NAME: The name of the service (e.g. Core API)
# - BUCKET_KEY: This is the key where the lambda artifacts will be stored in the hard coded bucket (e.g. b21/core-api)
# - IAC_KEY: This should be the key for the service in the image yaml in the pf-iac repo (e.g. core-api) (see castingnetworks-delete-release.yml)
# - RELEASE_TAG_PREFIX: This is the prefix that will be used for the release tag matching (e.g. release-v)
# - TERRAFORM_USE_OCI: Set to true if the service is using the OCI registry for the Terraform folder, otherwise set to false
# - TERRAFORM_IMAGE_NAME: The name of the image to use for the Terraform build if the above is set to true, otherwise create the variable but leave it blank
# 
# 
# The workflows are designed to be used in nodejs projects that use nx for the build and have an optional terraform directory.
# This workflow file covers the standard release and is the same template that is used for the build.
# 
# Workflow:
# 1. Lint & Test
# 2. Get Build Jobs
# 3. Sonar Cloud Scan
# 4. Integration Tests (skipped by default during release)
# 5. Calculate Release/Artifact Tag (value is used for s3 and ecr artifacts)
# 6. Build Libs - Matrix job that builds all the libraries in the project
# 7. Build Lambdas - Matrix job that builds all the lambdas in the project and uploads them to s3
# 8. [NOT PART OF EXECUTION FROM THIS WORKFLOW] Deploy to Development - Builds and Pushes a Docker Image to ECR. Uses the 'development' environment in GitHub
# 9. Deploy to Staging - Builds and Pushes a Docker Image to ECR.
#      Uses the 'staging' environment in GitHub. 
#      The staging job works by injecting a suffix into the artifact tag to differentiate it from the production environment.
# 10. Deploy to Production - Copies S3 artifacts and retags the ECR image removing
#      the suffix in both instances.
# 
# To use this workflow in a repository, the following steps should be followed:
# 1. Ensure the required secrets are set in the repository:
#   - NPM_AUTH_TOKEN (Set at the organization level)
#   - NPM_PUBLISH_TOKEN (Required if the project contains libraries that are published as a package)
#   - SONAR_TOKEN (Optional)
# 2. Replace the REPLACE_ placeholders in the file with the appropriate values for the service
#   - REPLACE_SERVICENAME: This should be replaced with the name of the service (e.g. Core API)
# 
# Please note AWS Authentication is handled by OIDC and there should be no need to add AWS credentials to the repository secrets.
# 
# Please reach out to the Devops team if you have any questions or need assistance with this workflow.
# Authored by Jesse McPherson (@mcfearsome)
name: REPLACE_SERVICENAME Release

on:
  release:
    types: [prereleased]

permissions:
  contents: write
  actions: read
  pull-requests: write
  id-token: write

jobs:
  call:
    uses: castingnetworks/devops-actions/.github/workflows/castingnetworks-service-build-and-deploy.yaml@v1
    with:
      # DO NOT CHANGE is-release to false, this is a release workflow
      is-release: true
      node-version: ${{ vars.NODE_VERSION }}
      bucket-key: ${{ vars.BUCKET_KEY }}
      release-tag-prefix: ${{ vars.RELEASE_TAG_PREFIX }}
      build-terraform-oci: ${{ (vars.TERRAFORM_USE_OCI == 'true') }}
      terraform-image-name: ${{ vars.TERRAFORM_IMAGE_NAME }}
      runs-on: ubuntu-latest
      skip-tests: true
      debug: false
    secrets: inherit
